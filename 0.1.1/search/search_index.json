{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to ANNUBeS","text":"<p>ANNUBeS, which stands for Artificial Neural Networks to Uncover Behavioral Strategies, is a deep learning framework meant to generate synthetic data and train on them neural networks aimed at developing and evaluating animals' training protocols in neuroscience. The package gives the users the possibility to generate behavioral data in a very flexible way, that can be used to train neural networks in the same way that animals are trained, and study whether the developed models can predict the behavior of the animals. The ultimate goal of the framework is to lead researchers to more efficient training protocols, thus improving neuroscience practices.</p> <p>\ud83d\udc1b Bugs reports and \u2b50 features requests here</p> <p>\ud83d\udd27 Pull Requests</p> <p>For more details about how to contribute, see the contribution guidelines.</p> <p>\u2757\u2757 DISCLAIMER \u2757\u2757</p> <p>Please note that this software is currently in its early stages of development. As such, some features may not work exactly as intended or envisioned yet. We appreciate your patience and understanding. If you encounter any issues or have suggestions for improvement, we encourage you to open an issue on our repository. Thank you for your support!</p>"},{"location":"basic_example/","title":"Basic example","text":""},{"location":"basic_example/#generate-synthetic-data","title":"Generate synthetic data","text":"<p>The <code>Task</code> data class can be used for defining a behavioral task, and many parameters can be set. The configuration of the trials that can appear during a session is given by a dictionary representing the ratio of the different trials within the task (<code>session</code>). Trials with a single modality (e.g., a visual trial) must be represented by single characters, while trials with multiple modalities (e.g., an audiovisual trial) are represented by the character combination of those trials. The probability of catch trials (denoted by X) in the session can be set using the <code>catch_prob</code> parameter.</p> <pre><code>from annubes.task import Task\n\ntask = Task(name='example_task',\n                session={\"v\":0.5, \"a\":0.5},\n                stim_intensities=[0.7, 0.9],\n                stim_time=2000,\n                catch_prob=0.3)\n</code></pre> <p>For more details about the <code>Task</code> class parameters, see the API Documentation.</p> <p>Then, trials can be generated:</p> <pre><code>NTRIALS = 10\ntrials = task.generate_trials(NTRIALS)\n</code></pre> <p>And plotted:</p> <pre><code>task.plot_trials(NTRIALS)\n</code></pre> <p> </p>"},{"location":"basic_example/#train-neural-networks","title":"Train neural networks","text":"<p>This functionality is still under development.</p>"},{"location":"code_of_conduct/","title":"Code of Conduct","text":""},{"location":"code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>In the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to creating a positive environment include:</p> <ul> <li>Using welcoming and inclusive language</li> <li>Being respectful of differing viewpoints and experiences</li> <li>Gracefully accepting constructive criticism</li> <li>Focusing on what is best for the community</li> <li>Showing empathy towards other community members</li> </ul> <p>Examples of unacceptable behavior by participants include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or   advances</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks</li> <li>Public or private harassment</li> <li>Publishing others' private information, such as a physical or electronic   address, without explicit permission</li> <li>Other conduct which could reasonably be considered inappropriate in a   professional setting</li> </ul>"},{"location":"code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Project maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.</p>"},{"location":"code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at g.crocioni@esciencecenter.nl. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.</p> <p>Project maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.</p>"},{"location":"code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 1.4, available at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html</p>"},{"location":"contributing/","title":"Contributing","text":"<p>We welcome any kind of contribution to our software, from simple comment or question to a full fledged pull request. Please read and follow our Code of Conduct.</p> <p>A contribution can be one of the following cases:</p> <ol> <li>you have a question;</li> <li>you think you may have found a bug (including unexpected behavior);</li> <li>you want to make some kind of change to the code base (e.g. to fix a bug, to add a new feature, to update documentation);</li> <li>you want to make a new release of the code base.</li> </ol> <p>The sections below outline the steps in each case.</p>"},{"location":"contributing/#you-have-a-question","title":"You have a question","text":"<ol> <li>use the search functionality here to see if someone already filed the same issue;</li> <li>if your issue search did not yield any relevant results, make a new issue;</li> <li>apply the \"Question\" label; apply other labels when relevant.</li> </ol>"},{"location":"contributing/#you-think-you-may-have-found-a-bug","title":"You think you may have found a bug","text":"<ol> <li>use the search functionality here to see if someone already filed the same issue;</li> <li>if your issue search did not yield any relevant results, make a new issue, making sure to provide enough information to the rest of the community to understand the cause and context of the problem. Depending on the issue, you may want to include:</li> <li>the SHA hashcode of the commit that is causing your problem;</li> <li>some identifying information (name and version number) for dependencies you're using;</li> <li>information about the operating system;</li> <li>apply relevant labels to the newly created issue.</li> </ol>"},{"location":"contributing/#you-want-to-make-some-kind-of-change-to-the-code-base","title":"You want to make some kind of change to the code base","text":"<ol> <li>(important) announce your plan to the rest of the community before you start working. This announcement should be in the form of a (new) issue;</li> <li>(important) wait until some kind of consensus is reached about your idea being a good idea;</li> <li>if needed, fork the repository to your own Github profile and create your own feature branch off of the latest master commit. While working on your feature branch, make sure to stay up to date with the master branch by pulling in changes, possibly from the 'upstream' repository (follow the instructions here and here);</li> <li>make sure the existing tests still work by running <code>pytest</code>;</li> <li>add your own tests (if necessary);</li> <li>update or expand the documentation;</li> <li>update the <code>CHANGELOG.md</code> file with change;</li> <li>push your feature branch to (your fork of) the annubes repository on GitHub;</li> <li>create the pull request, e.g. following the instructions here.</li> </ol> <p>In case you feel like you've made a valuable contribution, but you don't know how to write or run tests for it, or how to generate the documentation: don't let this discourage you from making the pull request; we can help you! Just go ahead and submit the pull request, but keep in mind that you might be asked to append additional commits to your pull request.</p>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#repository-installation","title":"Repository installation","text":"<p>We advise to install the package inside a virtual environment (using conda or venv).</p> <p>After having created and activated your environment, to install ANNUBeS from GitHub repository, do:</p> <pre><code>git clone git@github.com:ANNUBS/annubes.git\ncd annubes\npip install .\n</code></pre>"},{"location":"installation/#pypi-installation","title":"PyPI installation","text":"<p>Under development.</p>"},{"location":"license/","title":"License","text":"<p>Apache License</p> <p>Copyright 2023, Giulia Crocioni, Dani L. Bodor, The Netherlands eScience Center</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <p>http://www.apache.org/licenses/LICENSE-2.0</p> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"api/task/","title":"Task","text":""},{"location":"api/task/#annubes.task.Task","title":"Task  <code>dataclass</code>","text":"<pre><code>Task(\n    name: str,\n    session: dict[str, float] = lambda: {\n        \"v\": 0.5,\n        \"a\": 0.5,\n    }(),\n    stim_intensities: list[float] = lambda: [0.8, 0.9, 1](),\n    stim_time: int = 1000,\n    catch_prob: float = 0.5,\n    shuffle_trials: bool = True,\n    max_sequential: int | None = None,\n    *,\n    fix_intensity: float = 0,\n    fix_time: int | tuple[int, int] = 100,\n    iti: int | tuple[int, int] = 0,\n    dt: int = 20,\n    tau: int = 100,\n    n_outputs: int = 2,\n    output_behavior: list[float] = lambda: [0, 1](),\n    noise_std: float = 0.01,\n    scaling: bool = True\n)\n</code></pre> <p>             Bases: <code>TaskSettingsMixin</code></p> <p>General data class for defining a task.</p> <p>A task is defined by a set of trials, each of which is characterized by a sequence of inputs and expected outputs.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>Name of the task.</p> required <code>session</code> <code>dict[str, float]</code> <p>Configuration of the trials that can appear during a session. It is given by a dictionary representing the ratio (values) of the different trials (keys) within the task. Trials with a single modality (e.g., a visual trial) must be represented by single characters, while trials with multiple modalities (e.g., an audiovisual trial) are represented by the character combination of those trials. The capital letter X may not be used to signify a modality, as it is reserved for catch trials. Note that values are read relative to each other, such that e.g. <code>{\"v\": 0.25, \"a\": 0.75}</code> is equivalent to <code>{\"v\": 1, \"a\": 3}</code>. Defaults to {\"v\": 0.5, \"a\": 0.5}.</p> <code>lambda: {'v': 0.5, 'a': 0.5}()</code> <code>stim_intensities</code> <code>list[float]</code> <p>List of possible intensity values of each stimulus. Defaults to [0.8, 0.9, 1].</p> <code>lambda: [0.8, 0.9, 1]()</code> <code>stim_time</code> <code>int</code> <p>Duration of each stimulus in ms. Defaults to 1000.</p> <code>1000</code> <code>catch_prob</code> <code>float</code> <p>probability of catch trials (denoted by X) in the session. Must be between 0 and 1 (inclusive). Defaults to 0.5.</p> <code>0.5</code> <code>shuffle_trials</code> <code>bool</code> <p>If True (default), trial order will be randomized. If False, all trials corresponding to one modality (e.g. visual) are run before any trial of the next modality (e.g. auditory) starts, in the order defined in <code>session</code> (catch trials will still be randomly interspersed).</p> <code>True</code> <code>max_sequential</code> <code>int | None</code> <p>If <code>shuffle_trials</code> is True, sets the maximum number of sequential trials of the same modality. Defaults to None (no maximum).</p> <code>None</code>"},{"location":"api/task/#annubes.task.Task.generate_trials","title":"generate_trials","text":"<pre><code>generate_trials(\n    ntrials: int | tuple[int, int] = 20,\n    random_seed: int | None = None,\n) -&gt; dict[str, Any]\n</code></pre> <p>Method for generating trials.</p> <p>Parameters:</p> Name Type Description Default <code>ntrials</code> <code>int | tuple[int, int]</code> <p>Number of trials to generate. If a tuple is given, it is interpreted as an interval of possible values, and a value will be randomly picked from it. Defaults to 20.</p> <code>20</code> <code>random_seed</code> <code>int | None</code> <p>Seed for numpy's random number generator (rng). If an int is given, it will be used as the seed for <code>np.random.default_rng()</code>. Defaults to None (i.e. the initial state itself is random).</p> <code>None</code> <p>Returns:</p> Type Description <code>dict[str, Any]</code> <p>dict containing all input parameters of <code>Task</code> (\"task_settings\"), the input parameters for the current</p> <code>dict[str, Any]</code> <p><code>generate_trials()</code> method's call (\"ntrials\", \"random_state\"), and the generated data (\"modality_seq\",</p> <code>dict[str, Any]</code> <p>\"time\", \"phases\", \"inputs\", \"outputs\").</p> Source code in <code>annubes/task.py</code> <pre><code>def generate_trials(\n    self,\n    ntrials: int | tuple[int, int] = 20,\n    random_seed: int | None = None,\n) -&gt; dict[str, Any]:\n    \"\"\"Method for generating trials.\n\n    Args:\n        ntrials: Number of trials to generate. If a tuple is given, it is interpreted as an interval of\n            possible values, and a value will be randomly picked from it.\n            Defaults to 20.\n        random_seed: Seed for numpy's random number generator (rng). If an int is given, it will be used as the seed\n            for `np.random.default_rng()`.\n            Defaults to None (i.e. the initial state itself is random).\n\n    Returns:\n        dict containing all input parameters of `Task` (\"task_settings\"), the input parameters for the current\n        `generate_trials()` method's call (\"ntrials\", \"random_state\"), and the generated data (\"modality_seq\",\n        \"time\", \"phases\", \"inputs\", \"outputs\").\n    \"\"\"\n    # Check input parameters\n    self._check_range(\"ntrials\", ntrials, strict=True)\n    if random_seed is not None:\n        self._check_int_positive(\"random_seed\", random_seed, strict=False)\n\n    # Set random state\n    if random_seed is None:\n        rng = np.random.default_rng(random_seed)\n        random_seed = rng.integers(2**32)\n    self._rng = np.random.default_rng(random_seed)\n    self._random_seed = random_seed\n\n    self._ntrials = self._rng.integers(min(ntrials), max(ntrials)) if isinstance(ntrials, tuple) else ntrials\n\n    # Generate sequence of modalities\n    self._modality_seq = self._build_trials_seq()\n\n    # Setup phases of trial\n    self._fix_time, self._iti, self._time, self._phases = self._setup_trial_phases()\n\n    # Generate inputs and outputs\n    self._inputs = self._build_trials_inputs()\n    self._outputs = self._build_trials_outputs()\n\n    # Store trials settings and data\n    return {\n        \"task_settings\": self._task_settings,\n        \"ntrials\": self._ntrials,\n        \"random_seed\": self._random_seed,\n        \"modality_seq\": self._modality_seq,\n        \"time\": self._time,\n        \"phases\": self._phases,\n        \"inputs\": self._inputs,\n        \"outputs\": self._outputs,\n    }\n</code></pre>"},{"location":"api/task/#annubes.task.Task.plot_trials","title":"plot_trials","text":"<pre><code>plot_trials(n_plots: int = 1) -&gt; Figure\n</code></pre> <p>Method for plotting generated trials.</p> <p>Parameters:</p> Name Type Description Default <code>n_plots</code> <code>int</code> <p>number of trials to plot (capped by number of trials generated). Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>Figure</code> <p>go.Figure: Plotly figure of trial results.</p> Source code in <code>annubes/task.py</code> <pre><code>def plot_trials(self, n_plots: int = 1) -&gt; go.Figure:\n    \"\"\"Method for plotting generated trials.\n\n    Args:\n        n_plots: number of trials to plot (capped by number of trials generated). Defaults to 1.\n\n    Returns:\n        go.Figure: Plotly figure of trial results.\n    \"\"\"\n    # Check input parameters\n    self._check_int_positive(\"n_plots\", n_plots, strict=True)\n\n    if (p := n_plots) &gt; (t := self._ntrials):\n        msg = f\"Number of plots requested ({p}) exceeds number of trials ({t}). Will plot all trials.\"\n        warnings.warn(msg, stacklevel=2)\n        n_plots = self._ntrials\n\n    fig = make_subplots(\n        rows=n_plots,\n        cols=1,\n        shared_xaxes=True,\n        vertical_spacing=0.5 / n_plots,\n        subplot_titles=[f\"Trial {i + 1}  - modality {self._modality_seq[i]}\" for i in range(n_plots)],\n    )\n    showlegend = True\n    colors = [\n        \"#{:02x}{:02x}{:02x}\".format(\n            *tuple(int(c * 255) for c in colorsys.hsv_to_rgb(i / self._n_inputs, 1.0, 1.0)),\n        )\n        for i in range(self._n_inputs)\n    ]\n    for i in range(n_plots):\n        for idx, m in enumerate(self._modalities):\n            fig.add_trace(\n                go.Scatter(\n                    name=m,\n                    mode=\"markers+lines\",\n                    x=self._time[i],\n                    y=self._inputs[i][:, idx],\n                    marker_symbol=\"star\",\n                    legendgroup=m,\n                    showlegend=showlegend,\n                    line_color=colors[idx],\n                ),\n                row=i + 1,\n                col=1,\n            )\n        fig.add_trace(\n            go.Scatter(\n                name=\"START\",\n                mode=\"markers+lines\",\n                x=self._time[i],\n                y=self._inputs[i][:, self._n_inputs - 1],\n                marker_symbol=\"star\",\n                legendgroup=\"START\",\n                showlegend=showlegend,\n                line_color=\"green\",\n            ),\n            row=i + 1,\n            col=1,\n        )\n        fig.add_trace(\n            go.Scatter(\n                name=\"Choice 1: NO STIMULUS\",\n                mode=\"lines\",\n                x=self._time[i],\n                y=self._outputs[i][:, 0],\n                legendgroup=\"Choice 1\",\n                showlegend=showlegend,\n                line_color=\"orange\",\n            ),\n            row=i + 1,\n            col=1,\n        )\n        fig.add_trace(\n            go.Scatter(\n                name=\"Choice 2: STIMULUS\",\n                mode=\"lines\",\n                x=self._time[i],\n                y=self._outputs[i][:, 1],\n                legendgroup=\"Choice 2\",\n                showlegend=showlegend,\n                line_color=\"purple\",\n            ),\n            row=i + 1,\n            col=1,\n        )\n        fig.add_vline(\n            x=self._fix_time[i] + self.dt,\n            line_width=3,\n            line_dash=\"dash\",\n            line_color=\"red\",\n            row=i + 1,\n            col=1,\n        )\n        showlegend = False\n    fig.update_layout(height=1300, width=900, title_text=\"Trials\")\n    return fig\n</code></pre>"},{"location":"api/tasksettingsmixin/","title":"TaskSettingsMixin","text":""},{"location":"api/tasksettingsmixin/#annubes.task.TaskSettingsMixin","title":"TaskSettingsMixin  <code>dataclass</code>","text":"<pre><code>TaskSettingsMixin(\n    *,\n    fix_intensity: float = 0,\n    fix_time: int | tuple[int, int] = 100,\n    iti: int | tuple[int, int] = 0,\n    dt: int = 20,\n    tau: int = 100,\n    n_outputs: int = 2,\n    output_behavior: list[float] = lambda: [0, 1](),\n    noise_std: float = 0.01,\n    scaling: bool = True\n)\n</code></pre> <p>Mixin data class defining detailed parameters for <code>Task</code>.</p> <p>These settings are expected to be maintained throughout most experiments, whereas the attributes of <code>Task</code> itself are expected to be more commonly adjusted between individual experiments.</p> <p>Parameters:</p> Name Type Description Default <code>fix_intensity</code> <code>float</code> <p>Intensity of input signal during fixation. Defaults to 0.</p> <code>0</code> <code>fix_time</code> <code>int | tuple[int, int]</code> <p>Fixation time in ms. If a tuple is given, it is interpreted as an interval of possible values, and for each trial the value will be randomly picked from it. Note that the duration of each input and output signal is increased by this time. Defaults to 100.</p> <code>100</code> <code>iti</code> <code>int | tuple[int, int]</code> <p>Inter-trial interval, or time window between sequential trials, in ms. If a tuple is given, it is interpreted as an interval of possible values, and for each trial the value will be randomly picked from it. Defaults to 0.</p> <code>0</code> <code>dt</code> <code>int</code> <p>Sampling interval (inverted sampling frequency) in ms. Defaults to 20.</p> <code>20</code> <code>tau</code> <code>int</code> <p>Time constant for the dynamics of each network node in ms. Defaults to 100.</p> <code>100</code> <code>n_outputs</code> <code>int</code> <p>Number of output nodes in the network, signaling different behavioral choices. Defaults to 2.</p> <code>2</code> <code>output_behavior</code> <code>list[float]</code> <p>List of possible intensity values of the behavioral output. Currently only the smallest and largest value of this list are used. Defaults to [0, 1].</p> <code>lambda: [0, 1]()</code> <code>noise_std</code> <code>float</code> <p>Standard deviation of input noise. Defaults to 0.01.</p> <code>0.01</code> <code>scaling</code> <code>bool</code> <p>If True, input and output signals are rescaled between 0 and 1. A MinMaxScaler logic is used for this purpose. Defaults to True.</p> <code>True</code>"}]}