# see documentation, e.g.
# - https://packaging.python.org/en/latest/specifications/declaring-project-metadata/#declaring-project-metadata
# - https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
# - https://www.python.org/dev/peps/pep-0621/

[build-system]
requires = ["setuptools>=64.0.0", "setuptools-scm", "wheel"]
build-backend = "setuptools.build_meta"

[project]
authors = [
    { name = "Giulia Crocioni", email = "g.crocioni@esciencecenter.nl" },
    { name = "Dani Bodor", email = "d.bodor@esciencecenter.nl" },
]
classifiers = [
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Natural Language :: English",
    "Programming Language :: Python :: 3.11",
]
dependencies = ["numpy >= 1.26.2", "ruff >= 0.3.0", "plotly", "tqdm"]
description = "ANNUBeS: training Artificial Neural Networks to Uncover Behavioral Strategies in neuroscience"
keywords = ["neuroscience", "neural networks"]
license = { file = "LICENSE" }
name = "annubes"
readme = { file = "README.md", content-type = "text/markdown" }
requires-python = ">=3.11"
version = "0.1.0"

[project.optional-dependencies]
dev = [
    # packaging
    "build",
    "bump2version",
    # formatting and linting
    "ruff",
    # testing
    "pytest",
    "pytest-cov",
    "coverage [toml]",
    # static typing
    "mypy",
    # docs
    "mkdocs",
    "mkdocs-material",
    "mkdocs-exclude",
    "mkdocs-redirects",
    "mkdocstrings-python",
    "mike"
]
publishing = ["build", "twine", "wheel"]

[project.urls]
Repository = "https://github.com/ANNUBS/annubes"
Issues = "https://github.com/ANNUBS/annubes/issues"
Changelog = "https://github.com/ANNUBS/annubes/CHANGELOG.md"

[tool.pytest.ini_options]
testpaths = ["tests"]

[tool.coverage.run]
branch = true
source = ["annubes"]
command_line = "-m pytest"

# For completeness, until we move to an src-based layout
[tool.setuptools.packages.find]
include = ["annubes*"]
exclude = ["tests*"]

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py311,py312
skip_missing_interpreters = true
[testenv]
commands = pytest
extras = dev
"""

[tool.ruff]
line-length = 120

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    # Unwanted (potentially)
    "FBT",    # Using boolean arguments
    "ANN101", # Missing type annotation for `self` in method
    "ANN102", # Missing type annotation for `cls` in classmethod
    "ANN204", # Missing return type annotation for special (dunder) method
    "S105",   # Possible hardcoded password
    "S311",   # insecure random generators
    "PT011",  # pytest-raises-too-broad
    "TD",     # TODOs
    "FIX002", # Resolve TODOs
    # We may choose to ignore these in the future if they are counterproductive
    # "B028",   # No explicit `stacklevel` keyword argument found in warning
    # "SIM108", # Use ternary operator
    # Unneeded docstrings
    "D100", # Missing module docstring
    "D104", # Missing public package docstring
    "D105", # Missing docstring in magic method
    "D107", # Missing docstring in `__init__`
    # Rules irrelevant to the Google style
    "D203", # 1 blank line required before class docstring
    "D204",
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D215",
    "D400",
    "D401",
    "D404", # First word of the docstring should not be This
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
]

# Autofix settings
fixable = ["ALL"]
unfixable = ["F401"] # unused imports (should not disappear while editing)
extend-safe-fixes = [
    "D415",   # First line should end with a period, question mark, or exclamation point
    "D300",   # Use triple double quotes `"""`
    "D200",   # One-line docstring should fit on one line
    "TCH",    # Format type checking only imports
    "ISC001", # Implicitly concatenated strings on a single line
    "EM",     # Exception message variables
    "RUF013", # Implicit Optional
    "B006",   # Mutable default argument
]

isort.known-first-party = ["annubes"]

[tool.ruff.lint.per-file-ignores]
"*.ipynb" = ["ERA001"] # Commented out code
"tests/*" = [
    "S101",   # Use of `assert` detected
    "ANN201", # Missing return type
    "D103",   # Missing function docstring
    "SLF001", # private member access
]
"docs/*" = ["ALL"]
